const ProgramAST = require('./program-ast');

const classASTTemplate = function(className, comments, superClassName) {
	comments = comments == null ? [] : comments;
	return {
		type: 'ClassDeclaration',
		leadingComments: comments.map(function(line) {
			return {
				type: 'CommentLine',
				value: ' ' + line
			};
		}),
		id: {
			type: 'Identifier',
			name: className
		},
		superClass: superClassName == null ? null : {
			type: 'Identifier',
			name: superClassName
		},
		body: {}
	};
};
const classDef = {
	Controller: classASTTemplate('Controller', [
		'following code are auto-generated by owl',
		'controller is stateful'
	], 'CommonController'),
	Layout: classASTTemplate('Layout', [
		'layout is stateless'
	]),
	Mocker: classASTTemplate('Mocker', [
		'mocker is stateless'
	])
};
const defaultConstructor = {
	type: 'ClassMethod',
	kind: 'constructor',
	async: false,
	computed: false,
	expression: false,
	generator: false,
	static: false,
	key: {
		type: 'Identifier',
		name: 'constructor'
	},
	params: [{
		type: 'Identifier',
		name: 'externalOptions'
	}],
	body: [{
		type: 'BlockStatement',
		body: [{
			type: 'ExpressionStatement',
			expression: {
				type: 'AssignmentExpression',
				operator: '=',
				left: {
					type: 'MemberExpression',
					computed: false,
					object: {
						type: 'ThisExpression'
					},
					property: {
						type: 'Identifier',
						name: 'external'
					}
				},
				right: {
					type: 'Identifier',
					name: 'externalOptions'
				}
			}
		}]
	}]
};
const classConstructors = {
	Controller: defaultConstructor,
	Mocker: defaultConstructor,
	Layout: defaultConstructor
};
const exportSection = {
	type: 'ExpressionStatement',
	expression: {
		type: 'AssignmentExpression',
		operator: '=',
		left: {
			type: 'MemberExpression',
			computed: false,
			object: {
				type: 'Identifier',
				name: 'module'
			},
			property: {
				type: 'Identifier',
				name: 'exports'
			}
		},
		right: {
			type: 'FunctionExpression',
			async: false,
			expression: false,
			generator: false,
			params: [{
				type: 'Identifier',
				optional: false,
				name: 'options'
			}],
			body: {
				type: 'BlockStatement',
				body: [{
					type: 'ReturnStatement',
					argument: {
						type: 'NewExpression',
						callee: {
							type: 'Identifier',
							name: 'Controller'
						},
						arguments: [{
							type: 'ObjectExpression',
							properties: [{
								name: 'layout',
								class: 'Layout'
							}, {
								name: 'mocker',
								class: 'Mocker'
							}].map(function(arg) {
								return {
									type: 'ObjectProperty',
									computed: false,
									method: false,
									shorthand: false,
									key: {
										type: 'Identifier',
										name: arg.name
									},
									value: {
										type: 'NewExpression',
										callee: {
											type: 'Identifier',
											name: arg.class
										},
										arguments: [{
											type: 'Identifier',
											name: 'options'
										}]
									}
								};
							})
						}, {
							type: 'Identifier',
							name: 'options'
						}]
					}
				}]
			}
		}
	}
};

let ast = {
	loadFileAST: function(file) {
		if (file === null) {
			return;
		}

		this.state.program = new ProgramAST();
		this.state.program.loadFromFile(file);
		console.log(this.state.program.toAST());

		this.state.program.writeToFile(file);
		return this.state.program;
	}
};

module.exports = {
	ASTMixin: ast
};